I"y8<p><a href="https://reactjs.org/">React</a> is a framework from Facebook that lets us build user interfaces. It is known for its composability and the way it efficiently manages changes to the DOM.</p>

<p>Before you read any further, I would highly recommend all the <a href="https://reactjs.org/docs/getting-started.html">documentation</a>. It is fantastic and you shouldn‚Äôt sleep on it.</p>

<p><strong>React - TL;DR</strong></p>

<ul>
  <li>Install React and ReactDOM</li>
  <li>Write some React ‚öõÔ∏è !!!</li>
  <li>JSX</li>
  <li>Babel and babel-loader</li>
  <li>Summary</li>
</ul>

<h3 id="install-react-and-react-dom">Install React and React DOM</h3>

<p>Let‚Äôs install <code class="highlighter-rouge">react</code> and the <code class="highlighter-rouge">react-dom</code> node packages as primary dependencies:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>npm <span class="nb">install </span>react react-dom
</code></pre></div></div>

<h3 id="write-some-react">Write some React!</h3>

<p>Now update <code class="highlighter-rouge">src/index.js</code> to import React and ReactDOM to create a React Component and render it into the DOM:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Hello from React!</span><span class="dl">'</span><span class="p">),</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>I know what you‚Äôre saying, this doesn‚Äôt make use of that JSX syntatic sugar. JSX is super helpful, but it can confuse you at first if you do not understand what it is or what it represents. More on that below.</p>

<p>Now update <code class="highlighter-rouge">dist/index.html</code> and add a <code class="highlighter-rouge">&lt;div&gt;</code> into which to ReactDOM will render our React Components:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Hello World!<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;</span>
    
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"main.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
<p><strong>Note:</strong> The order of the <code class="highlighter-rouge">&lt;script&gt;</code> that‚Äôs running the JavaScript and the <code class="highlighter-rouge">&lt;div id='root'&gt;</code> matters. I believe our script that is looking for the <code class="highlighter-rouge">'id=root'</code> DOM element won‚Äôt find it if the script is declared <em>before</em> the <code class="highlighter-rouge">&lt;div&gt;</code>. Be sure to include it after the <code class="highlighter-rouge">&lt;div&gt;</code>. Try putting it before the <code class="highlighter-rouge">&lt;div&gt;</code> or even in the <code class="highlighter-rouge">&lt;head&gt;</code> and see what happens.</p>

<p>Re-run webpack, and refresh your browser:</p>

<p><img src="/assets/hello-world-react.png" alt="Hello world!" /></p>

<h3 id="jsx">JSX</h3>

<p><a href="https://facebook.github.io/jsx/">JSX</a> is an extension to JavaScript that allows you to write markup in scripts. It is neither a string nor HTML and <a href="https://babeljs.io/">Babel</a> will compile JSX into <code class="highlighter-rouge">React.createElement()</code> function calls like we wrote earlier. You can read <a href="https://reactjs.org/docs/jsx-in-depth.html">more about JSX here</a>.</p>

<p>Simply writing JSX in our script won‚Äôt get us all the way there. webpack will barf because it finds a token in the script that it doesn‚Äôt yet understand. Try it out:</p>

<p>Update <code class="highlighter-rouge">src/index.js</code> with some JSX:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="k">from</span> <span class="nx">React</span><span class="o">!&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="nx">element</span><span class="p">,</span>  
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Then try running webpack:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>npm run build
<span class="go">
</span><span class="gp">&gt;</span><span class="w"> </span>basic-react-app@1.0.0 build /Users/aconnolly/workspace/react/basic-react-app
<span class="gp">&gt;</span><span class="w"> </span>webpack
<span class="go">
Hash: 2b9f3a724dab7114999b
Version: webpack 4.29.0
Time: 332ms
Built at: 01/28/2019 6:36:15 AM
 1 asset
Entrypoint main = main.js
[0] ./src/index.js 238 bytes {0} [built] [failed] [1 error]

WARNING in configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/

ERROR in ./src/index.js 4:16
Module parse failed: Unexpected token (4:16)
You may need an appropriate loader to handle this file type.
</span><span class="gp">| import ReactDOM from 'react-dom';</span><span class="w">
</span><span class="go">|
</span><span class="gp">&gt;</span><span class="w"> </span>const element <span class="o">=</span> &lt;h1&gt;Hello from React!&lt;/h1&gt;<span class="p">;</span>
<span class="go">|
| ReactDOM.render(
npm ERR! code ELIFECYCLE
npm ERR! errno 2
npm ERR! basic-react-app@1.0.0 build: `webpack`
npm ERR! Exit status 2
npm ERR!
npm ERR! Failed at the basic-react-app@1.0.0 build script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/aconnolly/.npm/_logs/2019-01-28T14_36_15_408Z-debug.log
</span></code></pre></div></div>

<h3 id="babel-and-babel-loader">Babel and babel-loader</h3>

<p>To use JSX in our scripts we need to tell webpack use a special Babel ‚Äúpreset‚Äù to load our JavaScript files. <a href="https://babeljs.io/">Babel is a JavaScript compiler</a> and it has syntax presets that we can use to tell webpack that we‚Äôre writing JSX.</p>

<p>webpack uses <a href="https://webpack.js.org/loaders/">loaders</a> to customize compilation for different file types.</p>

<p>This step is complicated, so there are a few dev dependencies to install:</p>

<ul>
  <li><a href="https://webpack.js.org/loaders/babel-loader/"><code class="highlighter-rouge">babel-loader</code></a>: Allows compiling JavaScript using Babel</li>
  <li><code class="highlighter-rouge">@babel/core</code>: Nuts and bolts of the Babel compiler</li>
  <li><code class="highlighter-rouge">@babel/preset-react</code>: Let‚Äôs us write JSX and includes various other plugins.</li>
</ul>

<p>Install them and watch <code class="highlighter-rouge">node_modules</code> swell like a full belly on Thanksgiving! ü§ô</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>npm <span class="nb">install </span>babel-loader @babel/core @babel/preset-react <span class="nt">--save-dev</span>
</code></pre></div></div>

<p>Now that all of those things are installed, how do we <em>tell</em> webpack to use a babel-loader for our JavaScript files <em>and</em> that I want to use the react preset? A: In <code class="highlighter-rouge">webpack.config.js</code> add the loader as a new <code class="highlighter-rouge">module</code> key with some rules for which file types, folder exclusions, loader and presets:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/index.js</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">main.js</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dist</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">m</span><span class="se">?</span><span class="sr">js$/</span><span class="p">,</span>
        <span class="na">exclude</span><span class="p">:</span> <span class="sr">/</span><span class="se">(</span><span class="sr">node_modules|bower_components</span><span class="se">)</span><span class="sr">/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">babel-loader</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">presets</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">@babel/preset-react</span><span class="dl">'</span><span class="p">]</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>  
<span class="p">};</span>
</code></pre></div></div>

<p>Now run webpack again:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>npm run build
<span class="go">
</span><span class="gp">&gt;</span><span class="w"> </span>basic-react-app@1.0.0 build /Users/aconnolly/workspace/react/basic-react-app
<span class="gp">&gt;</span><span class="w"> </span>webpack
<span class="go">
Hash: 9eb49dcd15e2806ec9bf
Version: webpack 4.29.0
Time: 2509ms
Built at: 01/28/2019 6:56:32 PM
  Asset     Size  Chunks             Chunk Names
main.js  109 KiB       0  [emitted]  main
Entrypoint main = main.js
[3] ./src/index.js 189 bytes {0} [built]
[8] (webpack)/buildin/global.js 472 bytes {0} [built]
    + 7 hidden modules

WARNING in configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/
</span></code></pre></div></div>

<p>No errors! Done.</p>

<h3 id="summary">Summary</h3>

<p>This was interesting because there were a bunch of moving parts. There is <code class="highlighter-rouge">npm</code>, then <code class="highlighter-rouge">webpack</code>, then React and finally Babel and its <code class="highlighter-rouge">loader</code> system to help us with the latest JavaScript jazz like JSX. We worked through a bunch of fairly complicated things pretty quickly and now we have a very basic shell of a React app.</p>

<p>Nice job, time for some oreos.</p>
:ET